apply plugin: 'com.android.application'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'walle'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "com.tanxin.base"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        multiDexEnabled true
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi-v7a'
//            'armeabi', 'x86',, 'arm64-v8a', 'x86_64'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    signingConfigs {
        debug {
            storeFile file('C:/jks/yihan.jks')
            storePassword "tx19961112"
            keyAlias "tanxin"
            keyPassword "tx19961112"
        }
        release {
            try {
                storeFile file('C:/jks/yihan.jks')
                storePassword "tx19961112"
                keyAlias "tanxin"
                keyPassword "tx19961112"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }
    }

    buildTypes {
        debug {
            // 进行压缩优化
            zipAlignEnabled false
            // 进行混淆
            minifyEnabled false
            // 进行资源优化，移除无用的resource文件
            shrinkResources false
            // 使用的签名信息
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            // 进行混淆
            minifyEnabled false
            // 进行资源优化，移除无用的resource文件
            shrinkResources false
            // 进行压缩优化
            zipAlignEnabled true
            // 使用的签名信息
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
    }
    dexOptions {
        jumboMode = true
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation rootProject.ext.supportLibs
    implementation rootProject.ext.kotlinLibs
    implementation rootProject.ext.netWorkLibs
    implementation rootProject.ext.rxjavaLibs
    implementation rootProject.ext.buglyLibs
    implementation rootProject.ext.refreshLibs
    implementation rootProject.ext.common.walle
    implementation rootProject.ext.common.qmui
    implementation rootProject.ext.common.utilcode
    implementation rootProject.ext.common.fragmentation
    implementation rootProject.ext.common.eventbus
    implementation rootProject.ext.common.glide
    kapt rootProject.ext.common.glideCompiler
    implementation "com.xiaomai.environmentswitcher:environmentswitcher:1.5.2"
    kaptDebug "com.xiaomai.environmentswitcher:environmentswitcher-compiler:1.5.2"
    kaptRelease "com.xiaomai.environmentswitcher:environmentswitcher-compiler-release:1.5.2"
}


walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("C:/Users/Administrator/Desktop/channels")
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${appName}-${channel}-${buildType}-v${versionName}-${versionCode}.apk'
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}
kotlin {
    experimental {
        coroutines "enable"
    }
}